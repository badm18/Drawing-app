[{"C:\\HTML\\Canvas\\drawing-app\\src\\index.tsx":"1","C:\\HTML\\Canvas\\drawing-app\\src\\reportWebVitals.ts":"2","C:\\HTML\\Canvas\\drawing-app\\src\\App.tsx":"3","C:\\HTML\\Canvas\\drawing-app\\src\\Components\\Navbar.tsx":"4","C:\\HTML\\Canvas\\drawing-app\\src\\Components\\Canvas.tsx":"5","C:\\HTML\\Canvas\\drawing-app\\src\\Redux\\Reducers\\CanvasReducers.tsx":"6","C:\\HTML\\Canvas\\drawing-app\\src\\Redux\\Store\\Store.tsx":"7","C:\\HTML\\Canvas\\drawing-app\\src\\Redux\\Reducers\\UriReducer.ts":"8","C:\\HTML\\Canvas\\drawing-app\\src\\Redux\\Reducers\\linesReducer.tsx":"9"},{"size":629,"mtime":1611489908031,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":246,"mtime":1614094881603,"results":"13","hashOfConfig":"11"},{"size":14337,"mtime":1614098692955,"results":"14","hashOfConfig":"11"},{"size":14342,"mtime":1614114843241,"results":"15","hashOfConfig":"11"},{"size":980,"mtime":1613928705113,"results":"16","hashOfConfig":"11"},{"size":361,"mtime":1614094365939,"results":"17","hashOfConfig":"11"},{"size":462,"mtime":1613930641350,"results":"18","hashOfConfig":"11"},{"size":446,"mtime":1614094978525,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1b8i0u6",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\HTML\\Canvas\\drawing-app\\src\\index.tsx",[],["42","43"],"C:\\HTML\\Canvas\\drawing-app\\src\\reportWebVitals.ts",[],"C:\\HTML\\Canvas\\drawing-app\\src\\App.tsx",[],"C:\\HTML\\Canvas\\drawing-app\\src\\Components\\Navbar.tsx",["44"],"import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport '../ComponentsCss/Navbar.css'\r\nimport { canvasSettings, changeBrush, changeColor, changeStrokeWidth } from '../Redux/Reducers/CanvasReducers'\r\nimport CSS from 'csstype';\r\nimport { uriSettings } from '../Redux/Reducers/UriReducer';\r\nimport { clearPage } from '../Redux/Reducers/linesReducer';\r\nimport { Button, OverlayTrigger, Tooltip } from 'react-bootstrap';\r\n\r\nexport const Navbar: React.FC = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const brush = useSelector(canvasSettings)\r\n    const uriRedux = useSelector(uriSettings)\r\n\r\n    let tipAreaStyle = {\r\n        height: '43px',\r\n        width: '43px',\r\n        background: brush.brushSettings.color,\r\n    }\r\n\r\n    let style: CSS.Properties = {\r\n        visibility: 'hidden'\r\n    }\r\n\r\n    const [modalVisible, setVisible] = useState(style)\r\n\r\n\r\n    const downloadURI = (uri: any, name: any) => {\r\n        var link = document.createElement('a');\r\n        link.download = name;\r\n        link.href = uri;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n    }\r\n\r\n    const handleExport = () => {\r\n        console.log(uriRedux.link.uri)\r\n        if (uriRedux.link.uri != '') {\r\n            const uri = uriRedux.link.uri;\r\n            downloadURI(uri, 'stage.png');\r\n        }\r\n\r\n    };\r\n\r\n\r\n    return (\r\n        //style прописывается прямо в теге, чтобы навбар при уменьшении масштаба не изменялся\r\n        <div className=\"toolKit\" style={{ minWidth: window.innerWidth - 18 }}>\r\n            <div className=\"colors\">\r\n                <div className=\"itemsContainer\">\r\n                    <div className=\"colorItem red\" onClick={() => dispatch(changeColor('red'))}></div>\r\n                    <div className=\"colorItem orange\" onClick={() => dispatch(changeColor('orange'))}></div>\r\n                    <div className=\"colorItem yellow\" onClick={() => dispatch(changeColor('yellow'))}></div>\r\n                    <div className=\"colorItem green\" onClick={() => dispatch(changeColor('green'))}></div>\r\n                    <div className=\"colorItem blue\" onClick={() => dispatch(changeColor('blue'))}></div>\r\n                    <div className=\"colorItem indigo\" onClick={() => dispatch(changeColor('indigo'))}></div>\r\n                    <div className=\"colorItem purple\" onClick={() => dispatch(changeColor('purple'))}></div>\r\n                    <div className=\"colorItem brown\" onClick={() => dispatch(changeColor('brown'))}></div>\r\n                    <div className=\"colorItem black\" onClick={() => dispatch(changeColor('black'))}></div>\r\n                    <div className=\"colorItem pink\" onClick={() => dispatch(changeColor('pink'))}></div>\r\n                </div>\r\n                <div className=\"sectionName\"><p>Цвет</p></div>\r\n            </div>\r\n\r\n\r\n            <div className=\"tools\">\r\n                <div className=\"itemsContainer\">\r\n                    <div className=\"toolItem eraser\" onClick={() => dispatch(changeBrush('eraser'))}>\r\n                        <svg className=\"eraserIcon icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1920 1920\">\r\n                            <path className=\"st0\" d=\"M1137.2 321.6l475.3 475.3-123 123-475.3-475.3 123-123zm-738.1 738.1L874.4 1535l615-615-475.3-475.3-615 615zm-3 3l-84.3 84.3c-67.5 67.5-67.5 176.9 0 244.3l230.9 230.9c67.5 67.5 176.9 67.5 244.4 0l84.3-84.3-475.3-475.2z\" id=\"Layer_6\" />\r\n                            <g id=\"STROKES\">\r\n                                <path className=\"st1\" d=\"M1014.1 444.6l123.1-123 475.2 475.3-123 123-615 615-475.3-475.2z\" />\r\n                                <path className=\"st1\" d=\"M396.1 1062.7L871.4 1538l-84.3 84.3c-67.5 67.5-176.9 67.5-244.4 0l-230.9-230.9c-67.5-67.5-67.5-176.9 0-244.3l84.3-84.4z\" />\r\n                                <path className=\"st1\" d=\"M1489.4 919.9l-475.3-475.3\" />\r\n                                <path className=\"st1\" d=\"M960 1703.1h553\" />\r\n                                <path className=\"st1\" d=\"M1049.6 1600.5h553\" />\r\n                                <path className=\"st1\" d=\"M1142.6 1494.1h552.9\" />\r\n                            </g>\r\n                        </svg>\r\n                    </div>\r\n\r\n                    <div className=\"toolItem pencil\" onClick={() => dispatch(changeBrush('pencil'))}>\r\n                        <svg className=\"pencilIcon icon\" id=\"edit\" fill=\"#000000\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 50 50\" width=\"32px\" height=\"25px\"><path d=\"M 43.125 2 C 41.878906 2 40.636719 2.488281 39.6875 3.4375 L 38.875 4.25 L 45.75 11.125 C 45.746094 11.128906 46.5625 10.3125 46.5625 10.3125 C 48.464844 8.410156 48.460938 5.335938 46.5625 3.4375 C 45.609375 2.488281 44.371094 2 43.125 2 Z M 37.34375 6.03125 C 37.117188 6.0625 36.90625 6.175781 36.75 6.34375 L 4.3125 38.8125 C 4.183594 38.929688 4.085938 39.082031 4.03125 39.25 L 2.03125 46.75 C 1.941406 47.09375 2.042969 47.457031 2.292969 47.707031 C 2.542969 47.957031 2.90625 48.058594 3.25 47.96875 L 10.75 45.96875 C 10.917969 45.914063 11.070313 45.816406 11.1875 45.6875 L 43.65625 13.25 C 44.054688 12.863281 44.058594 12.226563 43.671875 11.828125 C 43.285156 11.429688 42.648438 11.425781 42.25 11.8125 L 9.96875 44.09375 L 5.90625 40.03125 L 38.1875 7.75 C 38.488281 7.460938 38.578125 7.011719 38.410156 6.628906 C 38.242188 6.246094 37.855469 6.007813 37.4375 6.03125 C 37.40625 6.03125 37.375 6.03125 37.34375 6.03125 Z\"></path></svg>\r\n                    </div >\r\n\r\n                    <div className=\"toolItem fillBucket\" onClick={() => dispatch(changeBrush('fillBucket'))}>\r\n                        <svg className=\"fillBucketIcon icon\" id=\"Flat\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 256 256\">\r\n                            <path d=\"M218.68652,124a13.90644,13.90644,0,0,0-4.10156-9.89941l-84.68555-84.687a14.01851,14.01851,0,0,0-19.79882.00049l-30.104,30.104-25.897-25.897a5.99971,5.99971,0,0,0-8.48438,8.48536L71.51184,68.00293,17.415,122.1001a13.99784,13.99784,0,0,0,0,19.79931l84.68555,84.68653v.00049a14.01792,14.01792,0,0,0,19.79882-.00049l92.68555-92.686A13.90841,13.90841,0,0,0,218.68652,124Zm-12.58593,1.41406L113.415,218.1001a2.00341,2.00341,0,0,1-2.83008,0v.00049l-84.68555-84.687a1.99869,1.99869,0,0,1,0-2.82763L79.997,76.48828l25.87512,25.875a25.99759,25.99759,0,0,0,40.5127,32.02734l.001-.00048a26.00281,26.00281,0,0,0-32.03491-40.51783L88.48169,68.00317,118.585,37.8999a2.0043,2.0043,0,0,1,2.83008-.00049l84.68555,84.687a1.99869,1.99869,0,0,1,0,2.82763ZM128,102.00586a13.99976,13.99976,0,1,1-9.90039,4.10059A13.90621,13.90621,0,0,1,128,102.00586Zm104.24316,49.752a6.00017,6.00017,0,0,0-8.48632,0C222.86816,152.64648,202,173.77637,202,196a26,26,0,0,0,52,0C254,173.77637,233.13184,152.64648,232.24316,151.75781ZM228,210a14.01572,14.01572,0,0,1-14-14c0-11.89209,8.60937-24.3208,14-30.937,5.3916,6.61767,14,19.04492,14,30.937A14.01572,14.01572,0,0,1,228,210Z\" />\r\n                        </svg>\r\n                    </div>\r\n\r\n                    <div className=\"toolItem loupe\" onClick={() => dispatch(changeBrush('loupe'))}>\r\n                        <svg className=\"loupeIcon icon\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" enable-background=\"new 0 0 512 512\">\r\n                            <g>\r\n                                <g>\r\n                                    <path d=\"m304.7,10.9c-108.5,0-196.4,87.9-196.4,196.4 0,46.9 16.4,89.9 43.8,123.7l-135,135c-8,8-8,20.9 0,28.9 8,8 20.9,8 28.9,0l135-135c33.8,27.4 76.8,43.8 123.7,43.8 108.5,0 196.4-87.9 196.4-196.4s-88-196.4-196.4-196.4zm0,352c-85.9,0-155.6-69.7-155.6-155.6 0-85.9 69.7-155.6 155.6-155.6 85.9,0 155.6,69.7 155.6,155.6 5.68434e-14,85.9-69.7,155.6-155.6,155.6z\" />\r\n                                </g>\r\n                            </g>\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n                <div className=\"sectionName\"><p>Инструменты</p></div>\r\n            </div >\r\n\r\n\r\n            <div className=\"figures\" >\r\n                <div className=\"itemsContainer\">\r\n\r\n                    <div className=\"figureItem line\" onClick={() => dispatch(changeBrush('line'))}>\r\n                        <svg className=\"lineIcon icon\" width=\"28\" height=\"46\" viewBox=\"0 0 28 46\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <line id=\"line\" x1=\"1.6902\" y1=\"45.269\" x2=\"26.0585\" y2=\"1.60907\" stroke=\"black\" stroke-width=\"3\" />\r\n                        </svg>\r\n                    </div>\r\n\r\n                    <div className=\"figureItem rectangle\" onClick={() => dispatch(changeBrush('rectangle'))}>\r\n                        <svg className=\"rectangleIcon icon\" width=\"50\" height=\"50\" viewBox=\"0 0 50 50\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <rect id=\"rectangle\" x=\"0.5\" y=\"0.5\" width=\"49\" height=\"49\" fill=\"#ECE3E2\" stroke=\"black\" />\r\n                        </svg>\r\n                    </div>\r\n\r\n                    <div className=\"figureItem ellipse\" onClick={() => dispatch(changeBrush('ellipse'))}>\r\n                        <svg className=\"ellipseIcon icon\" width=\"50\" height=\"50\" viewBox=\"0 0 50 50\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <circle id=\"circle\" cx=\"25\" cy=\"25\" r=\"24.5\" fill=\"#ECE3E2\" stroke=\"black\" />\r\n                        </svg>\r\n                    </div>\r\n\r\n                    <div className=\"figureItem star\" onClick={() => dispatch(changeBrush('star'))}>\r\n                        <svg className=\"starIcon icon\" width=\"50\" height=\"50\" viewBox=\"0 0 48 46\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path id=\"star\" d=\"M24 1.61804L29.1373 17.4291L29.2496 17.7746H29.6129H46.2376L32.7879 27.5463L32.494 27.7599L32.6063 28.1054L37.7436 43.9164L24.2939 34.1446L24 33.9311L23.7061 34.1446L10.2564 43.9164L15.3937 28.1054L15.506 27.7599L15.2121 27.5463L1.76243 17.7746H18.3871H18.7504L18.8627 17.4291L24 1.61804Z\" fill=\"#ECE3E2\" stroke=\"black\" />\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n                <div className=\"sectionName\"><p>Фигуры</p></div>\r\n            </div>\r\n\r\n\r\n            <div className=\"lineWeight\" onClick={() => {\r\n                modalVisible.visibility === 'hidden' ?\r\n                    setVisible({ visibility: 'visible' }) :\r\n                    setVisible({ visibility: 'hidden' })\r\n            }}>\r\n                <div className=\"lineWeightConteiner\">\r\n                    <svg width=\"60\" height=\"60\" viewBox=\"0 0 179 128\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <line x1=\"8\" y1=\"24\" x2=\"170\" y2=\"24\" stroke=\"black\" stroke-width=\"2\" />\r\n                        <line x1=\"9\" y1=\"98.5\" x2=\"171\" y2=\"98.5\" stroke=\"black\" stroke-width=\"7\" />\r\n                        <line x1=\"9\" y1=\"62\" x2=\"171\" y2=\"62\" stroke=\"black\" stroke-width=\"4\" />\r\n                    </svg>\r\n                </div>\r\n\r\n                <div className=\"sectionName\"><p>Толщина</p></div>\r\n\r\n                <div className=\"modalLineWeight\" style={modalVisible}>\r\n                    <p>Выберите толщину:</p>\r\n\r\n                    <div className=\"modalLine\" onClick={() => dispatch(changeStrokeWidth(1))}>\r\n                        <svg className=\"tipLine\" width=\"162\" height=\"2\" viewBox=\"0 0 162 2\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <line y1=\"1\" x2=\"162\" y2=\"1\" stroke=\"black\" stroke-width=\"2\" />\r\n                        </svg>\r\n                    </div>\r\n\r\n                    <div className=\"modalLine\" onClick={() => dispatch(changeStrokeWidth(3))}>\r\n                        <svg className=\"tipLine\" width=\"162\" height=\"4\" viewBox=\"0 0 162 4\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <line y1=\"2\" x2=\"162\" y2=\"2\" stroke=\"black\" stroke-width=\"4\" />\r\n                        </svg>\r\n                    </div>\r\n\r\n                    <div className=\"modalLine\" onClick={() => dispatch(changeStrokeWidth(5))}>\r\n                        <svg className=\"tipLine\" width=\"162\" height=\"7\" viewBox=\"0 0 162 7\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <line y1=\"3.5\" x2=\"162\" y2=\"3.5\" stroke=\"black\" stroke-width=\"7\" />\r\n                        </svg>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n            <div className=\"tipArea\">\r\n                <div className=\"colorItems\">\r\n                    <div className=\"currentColor\" style={tipAreaStyle}></div>\r\n                    <div><p className=\"colorP\">Цвет</p></div>\r\n                </div>\r\n\r\n                <div className=\"brushSettings\">\r\n                    <div className=\"shortInfo\">\r\n                        <p>Кисть:{brush.brushSettings.brushType}</p>\r\n                        <p>Толщина:{brush.brushSettings.strokeWidth}</p>\r\n                        <p>Масштаб:{brush.brushSettings.scale}</p>\r\n                    </div>\r\n\r\n                    <div className=\"navButtons\">\r\n                        <OverlayTrigger\r\n                            key='bottom'\r\n                            placement='bottom'\r\n                            overlay={\r\n                                <Tooltip id='tooltip-bottom'>\r\n                                    Сохранить картинку\r\n                             </Tooltip>\r\n                            }\r\n                        >\r\n                            <Button\r\n                                className=\"navBtn\"\r\n                                variant=\"primary\"\r\n                                size=\"sm\"\r\n                                onClick={handleExport}\r\n                            >Скачать</Button>\r\n                        </OverlayTrigger>\r\n                        <Button\r\n                            className=\"navBtn\"\r\n                            variant=\"primary\"\r\n                            size=\"sm\"\r\n                            onClick={() => dispatch(clearPage(true))}\r\n                        >очистить холст</Button>\r\n                        \r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n\r\n        </div >\r\n    )\r\n}\r\n\r\n",["45","46"],"C:\\HTML\\Canvas\\drawing-app\\src\\Components\\Canvas.tsx",["47","48","49"],"import React, { useState } from 'react'\r\nimport { Layer, Line, Rect, Stage, Ellipse, Star } from '../../node_modules/react-konva';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { canvasSettings, scaleChange } from '../Redux/Reducers/CanvasReducers';\r\nimport { changeUri } from '../Redux/Reducers/UriReducer';\r\nimport { clearPage, linesNstyle } from '../Redux/Reducers/linesReducer';\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const Canvas: React.FC = () => {\r\n\r\n    const brush = useSelector(canvasSettings)  //настройки кисти из redux\r\n    const page = useSelector(linesNstyle)\r\n\r\n    const [scale, setScale] = React.useState({ x: 1, y: 1 })\r\n    const [size, setSize] = React.useState({ width: window.innerWidth, height: window.innerHeight })\r\n    const [lines, setLines]: any[] = React.useState([]);\r\n    const [currentLine, setCurrentLine]: any = useState([]);\r\n    const [lineStyle, setStyle]: any[] = React.useState([])//используется для хранения настроек линии(цвет, кисть и т.д)\r\n    const isDrawing = React.useRef(false);\r\n\r\n    const stageRef = React.useRef<any>(null);\r\n    const dispatch = useDispatch();\r\n\r\n    React.useEffect(() => {\r\n        const checkSize = () => {\r\n            setSize({\r\n                width: window.innerWidth,\r\n                height: window.innerHeight\r\n            })\r\n        }\r\n        window.addEventListener('resize', checkSize);\r\n        return () => window.removeEventListener('resize', checkSize);\r\n    }, [])\r\n\r\n    React.useEffect(() => { //если нажата кнопка \"очистить\", то в redux меняется значение переменной и после этого срабатывает хук useEffect\r\n        if (page.clear) {\r\n            setLines([])\r\n            setStyle([])\r\n            dispatch(clearPage(false))\r\n            dispatch(changeUri(''))\r\n        }\r\n\r\n    }, [page.clear])\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const changeScale = (e: any) => {\r\n        if (brush.brushSettings.brushType === 'loupe') {\r\n            if (e.evt.button === 0 && scale.x < 3) {\r\n                setScale({\r\n                    x: scale.x + 0.25,\r\n                    y: scale.y + 0.25\r\n                })\r\n                dispatch(scaleChange(scale.x + 0.25))\r\n            }\r\n            if (e.evt.button === 2 && e.type === 'contextmenu' && scale.x > 0.25) {\r\n                e.evt.preventDefault()\r\n                //   e.evt.defaultPrevented=false\r\n                setScale({\r\n                    x: scale.x - 0.25,\r\n                    y: scale.y - 0.25\r\n                })\r\n                dispatch(scaleChange(scale.x - 0.25))\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    const fillShape = async (e: any) => {\r\n\r\n        if (brush.brushSettings.brushType === 'fillBucket') {\r\n\r\n            //изменение свойства fill в массиве\r\n            let upadatedStyle = lineStyle.map((item: any) => {\r\n                if (item.id === lineStyle[e.target.index].id) {\r\n                    return {\r\n                        id: item.id,\r\n                        color: brush.brushSettings.color,\r\n                        brushType: item.brushType,\r\n                        strokeWidth: item.strokeWidth,\r\n                        fill: brush.brushSettings.color\r\n                    }\r\n                } else {\r\n                    return item\r\n                }\r\n\r\n            })\r\n\r\n            setStyle(upadatedStyle)\r\n        }\r\n        dispatch(changeUri(stageRef.current.toDataURL()))//изменение ссылки для скачивания картинки после заливки фигуры\r\n    }\r\n\r\n\r\n    const handleMouseDown = (e: any) => {\r\n\r\n\r\n        changeScale(e) //нажатие левой кнопки мыши\r\n\r\n        isDrawing.current = true;\r\n        const pos = e.target.getStage().getPointerPosition();\r\n\r\n        setCurrentLine({\r\n            points: [pos.x / scale.x, pos.y / scale.y],\r\n            firstPoint: [pos.x, pos.y],\r\n            brushStyle: {\r\n                strokeWidth: 5,\r\n                color: brush.brushSettings.color,\r\n                brushType: brush.brushSettings.brushType\r\n            }\r\n        })\r\n\r\n\r\n\r\n    };\r\n\r\n    const handleMouseMove = (e: any) => {\r\n\r\n\r\n\r\n\r\n        // no drawing - skipping\r\n        if (!isDrawing.current) {\r\n            return;\r\n        }\r\n\r\n        const stage = e.target.getStage();\r\n        const point = stage.getPointerPosition();\r\n        const [x0, y0] = currentLine.firstPoint;\r\n\r\n\r\n        if (brush.brushSettings.brushType === 'line') {\r\n\r\n            setCurrentLine({\r\n                points: [x0 / scale.x, y0 / scale.y, point.x / scale.x, point.y / scale.y],\r\n                firstPoint: [x0, y0]\r\n            })\r\n\r\n        } else if (brush.brushSettings.brushType === 'rectangle') {\r\n            setCurrentLine({\r\n                // points: [x0 / scale.x, y0 / scale.y, point.x / scale.x, y0 / scale.y, point.x / scale.x, point.y / scale.y, x0 / scale.x, point.y / scale.y, x0 / scale.x, y0 / scale.y],\r\n                points: [x0 / scale.x, y0 / scale.y, point.x / scale.x - x0 / scale.x, point.y / scale.x - y0 / scale.y],\r\n                firstPoint: [x0, y0]\r\n            })\r\n        } else if (brush.brushSettings.brushType === 'ellipse') {\r\n            setCurrentLine({\r\n                points: [x0 / scale.x + ((point.x / scale.x - x0 / scale.x) / 2), y0 / scale.y + ((point.y / scale.y - y0 / scale.y) / 2), Math.abs((x0 / scale.x - point.x / scale.x) / 2), Math.abs((y0 / scale.y - point.y / scale.y) / 2)],\r\n                //так как для правильной работы овала нужно высчитывать значение x и y, то значения x0 и y0 будут постоянно менятся из-за чего овал будет неправильно выводится\r\n                firstPoint: [x0, y0]\r\n            })\r\n        } else if (brush.brushSettings.brushType === 'star') {\r\n            setCurrentLine({\r\n                points: [x0 / scale.x + ((point.x / scale.x - x0 / scale.x) / 2), y0 / scale.y + ((point.y / scale.y - y0 / scale.y) / 2), Math.abs(x0 / scale.x - point.x / scale.x), Math.abs(y0 / scale.y - point.y / scale.y)],\r\n                firstPoint: [x0, y0]\r\n            })\r\n        } else if (brush.brushSettings.brushType === 'eraser') {\r\n            setCurrentLine({\r\n                points: [...currentLine.points].concat([point.x / scale.x, point.y / scale.y]),\r\n                firstPoint: [x0, y0]\r\n            })\r\n        }\r\n        else {\r\n            if (brush.brushSettings.brushType != 'loupe' && brush.brushSettings.brushType != 'fillBucket') {\r\n                setCurrentLine({\r\n                    points: [...currentLine.points].concat([point.x / scale.x, point.y / scale.y]),\r\n                    firstPoint: [x0, y0]\r\n                })\r\n            }\r\n\r\n        }\r\n    };\r\n\r\n    const handleMouseUp = () => {\r\n\r\n        dispatch(changeUri(stageRef.current.toDataURL())) //изменение ссылки для скачивания картинки\r\n\r\n        if (brush.brushSettings.brushType !== 'fillBucket') {\r\n\r\n\r\n            setStyle([...lineStyle, {\r\n                id: Date.now(),\r\n                color: brush.brushSettings.color,\r\n                brushType: brush.brushSettings.brushType,\r\n                strokeWidth: brush.brushSettings.strokeWidth,\r\n                fill: null\r\n            }]);\r\n            setLines([...lines, currentLine.points]);\r\n            isDrawing.current = false;\r\n            setCurrentLine({   //используется для того, чтобы при использовании фигуры квадрат, не использовались точки которые были до этого\r\n                points: [0, 0, 0, 0]\r\n            })\r\n        }\r\n\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"canvas\">\r\n            <Stage\r\n                ref={stageRef}\r\n                width={(size.width - 18) * scale.x}\r\n                height={(size.height - 100) * scale.y}\r\n                onMouseDown={(e) => handleMouseDown(e)}\r\n                onMouseMove={handleMouseMove}\r\n                onMouseUp={handleMouseUp}\r\n                onContextMenu={changeScale}\r\n                onClick={fillShape}\r\n                scaleX={scale.x}\r\n                scaleY={scale.y}\r\n            >\r\n\r\n\r\n                <Layer >\r\n\r\n                    {lines.map((line: any, i: any) => (\r\n\r\n                        lineStyle[i].brushType === 'line' ? // +квадрат, так как он рисуется с помощью line\r\n                            < Line\r\n                                key={i}\r\n                                points={line}\r\n                                strokeWidth={lineStyle[i].strokeWidth}\r\n                                stroke={lineStyle[i].color}\r\n                                onClick={fillShape}\r\n                            /> :\r\n                            lineStyle[i].brushType === 'rectangle' ?\r\n                                <Rect\r\n                                    x={lines[i][0]}\r\n                                    y={lines[i][1]}\r\n                                    width={lines[i][2]}\r\n                                    height={lines[i][3]}\r\n                                    stroke={lineStyle[i].color}\r\n                                    fill={lineStyle[i].fill}\r\n                                    strokeWidth={lineStyle[i].strokeWidth}\r\n                                    onClick={fillShape}\r\n                                /> :\r\n                                lineStyle[i].brushType === 'ellipse' ?\r\n                                    <Ellipse\r\n                                        x={line[0]}\r\n                                        y={line[1]}\r\n                                        radiusX={line[2]}\r\n                                        radiusY={line[3]}\r\n                                        fill={lineStyle[i].fill}\r\n                                        stroke={lineStyle[i].color}\r\n                                        strokeWidth={lineStyle[i].strokeWidth}\r\n                                        onClick={fillShape}\r\n                                    /> :\r\n                                    lineStyle[i].brushType === 'star' ?\r\n                                        <Star\r\n                                            x={line[0]}\r\n                                            y={line[1]}\r\n                                            numPoints={5}\r\n                                            innerRadius={line[2]}\r\n                                            outerRadius={line[3]}\r\n                                            fill={lineStyle[i].fill}\r\n                                            stroke={lineStyle[i].color}\r\n                                            strokeWidth={lineStyle[i].strokeWidth}\r\n                                            onClick={fillShape}\r\n                                        /> :\r\n                                        < Line\r\n                                            key={i}\r\n                                            points={line}\r\n                                            strokeWidth={lineStyle[i].strokeWidth}\r\n                                            stroke={lineStyle[i].brushType === 'eraser' ? 'white' : lineStyle[i].color}\r\n                                        // globalCompositeOperation={lineStyle[i].brushType !== 'eraser' ? 'source-out' : 'destination-out'}\r\n                                        />\r\n\r\n\r\n                    ))}\r\n                </Layer>\r\n\r\n                <Layer>\r\n\r\n\r\n                    {brush.brushSettings.brushType === 'ellipse' ?\r\n                        <Ellipse\r\n                            x={currentLine.points[0]}\r\n                            y={currentLine.points[1]}\r\n                            radiusX={currentLine.points[2]}\r\n                            radiusY={currentLine.points[3]}\r\n\r\n                            stroke={brush.brushSettings.color}\r\n                            strokeWidth={brush.brushSettings.strokeWidth}\r\n                        /> :\r\n                        brush.brushSettings.brushType === 'rectangle' ?\r\n                            <Rect\r\n                                x={currentLine.points[0]}\r\n                                y={currentLine.points[1]}\r\n                                width={currentLine.points[2]}\r\n                                height={currentLine.points[3]}\r\n                                stroke={brush.brushSettings.color}\r\n                                strokeWidth={brush.brushSettings.strokeWidth}\r\n                            /> :\r\n                            brush.brushSettings.brushType === 'star' ?\r\n                                <Star\r\n                                    x={currentLine.points[0]}\r\n                                    y={currentLine.points[1]}\r\n                                    numPoints={5}\r\n                                    innerRadius={currentLine.points[2]}\r\n                                    outerRadius={currentLine.points[3]}\r\n                                    stroke={brush.brushSettings.color}\r\n                                    strokeWidth={brush.brushSettings.strokeWidth}\r\n                                /> :\r\n                                brush.brushSettings.brushType === 'line' ?\r\n                                    <Line\r\n                                        {...currentLine}\r\n                                        strokeWidth={brush.brushSettings.strokeWidth}\r\n                                        stroke={brush.brushSettings.color}\r\n                                    /> :\r\n                                    < Line {...currentLine} strokeWidth={brush.brushSettings.strokeWidth}\r\n                                        stroke={brush.brushSettings.brushType === 'eraser' ? 'white' : brush.brushSettings.color}\r\n                                    // globalCompositeOperation={'source-over'}\r\n                                    />\r\n                        // <Circle x={currentLine.points[0]} y={currentLine.points[1]} radius={currentLine.points[2]} fill=\"white\" stroke={'black'} strokeWidth={3} lineJoin={'round'} /> :\r\n\r\n\r\n\r\n                    }\r\n\r\n                </Layer>\r\n            </Stage>\r\n\r\n        </div>\r\n    );\r\n}","C:\\HTML\\Canvas\\drawing-app\\src\\Redux\\Reducers\\CanvasReducers.tsx",[],"C:\\HTML\\Canvas\\drawing-app\\src\\Redux\\Store\\Store.tsx",[],"C:\\HTML\\Canvas\\drawing-app\\src\\Redux\\Reducers\\UriReducer.ts",[],"C:\\HTML\\Canvas\\drawing-app\\src\\Redux\\Reducers\\linesReducer.tsx",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":40,"column":31,"nodeType":"56","messageId":"57","endLine":40,"endColumn":33},{"ruleId":"50","replacedBy":"58"},{"ruleId":"52","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":47,"column":8,"nodeType":"62","endLine":47,"endColumn":20,"suggestions":"63"},{"ruleId":"54","severity":1,"message":"55","line":171,"column":47,"nodeType":"56","messageId":"57","endLine":171,"endColumn":49},{"ruleId":"54","severity":1,"message":"55","line":171,"column":91,"nodeType":"56","messageId":"57","endLine":171,"endColumn":93},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["64"],["65"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["66"],"no-global-assign","no-unsafe-negation",{"desc":"67","fix":"68"},"Update the dependencies array to be: [dispatch, page.clear]",{"range":"69","text":"70"},[1774,1786],"[dispatch, page.clear]"]